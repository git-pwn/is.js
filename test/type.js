describe( 'bundle:type' , function () {

    it( 'is.sameType' , function () {

        expect( is.sameType( null , null ) ).toBeTruthy()
        expect( is.sameType( null , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( null , 0 ) ).not.toBeTruthy()
        expect( is.sameType( null , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( null , '' ) ).not.toBeTruthy()
        expect( is.sameType( null , new String() ) ).not.toBeTruthy()
        expect( is.sameType( null , true ) ).not.toBeTruthy()
        expect( is.sameType( null , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( null , {} ) ).not.toBeTruthy()
        expect( is.sameType( null , [] ) ).not.toBeTruthy()
        expect( is.sameType( null , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( null , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( null , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( null , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( void 0 , null ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , void 0 ) ).toBeTruthy()
        expect( is.sameType( void 0 , 0 ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , '' ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , new String() ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , true ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , {} ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , [] ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( void 0 , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( 0 , null ) ).not.toBeTruthy()
        expect( is.sameType( 0 , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( 0 , 0 ) ).toBeTruthy()
        expect( is.sameType( 0 , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( 0 , '' ) ).not.toBeTruthy()
        expect( is.sameType( 0 , new String() ) ).not.toBeTruthy()
        expect( is.sameType( 0 , true ) ).not.toBeTruthy()
        expect( is.sameType( 0 , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( 0 , {} ) ).not.toBeTruthy()
        expect( is.sameType( 0 , [] ) ).not.toBeTruthy()
        expect( is.sameType( 0 , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( 0 , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( 0 , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( 0 , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( new Number() , null ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , new Number() ) ).toBeTruthy()
        expect( is.sameType( new Number() , '' ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , new String() ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , true ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , {} ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , [] ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( new Number() , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( '' , null ) ).not.toBeTruthy()
        expect( is.sameType( '' , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( '' , 0 ) ).not.toBeTruthy()
        expect( is.sameType( '' , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( '' , '' ) ).toBeTruthy()
        expect( is.sameType( '' , new String() ) ).not.toBeTruthy()
        expect( is.sameType( '' , true ) ).not.toBeTruthy()
        expect( is.sameType( '' , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( '' , {} ) ).not.toBeTruthy()
        expect( is.sameType( '' , [] ) ).not.toBeTruthy()
        expect( is.sameType( '' , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( '' , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( '' , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( '' , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( new String() , null ) ).not.toBeTruthy()
        expect( is.sameType( new String() , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( new String() , 0 ) ).not.toBeTruthy()
        expect( is.sameType( new String() , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( new String() , '' ) ).not.toBeTruthy()
        expect( is.sameType( new String() , new String() ) ).toBeTruthy()
        expect( is.sameType( new String() , true ) ).not.toBeTruthy()
        expect( is.sameType( new String() , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( new String() , {} ) ).not.toBeTruthy()
        expect( is.sameType( new String() , [] ) ).not.toBeTruthy()
        expect( is.sameType( new String() , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( new String() , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( new String() , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( new String() , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( true , null ) ).not.toBeTruthy()
        expect( is.sameType( true , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( true , 0 ) ).not.toBeTruthy()
        expect( is.sameType( true , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( true , '' ) ).not.toBeTruthy()
        expect( is.sameType( true , new String() ) ).not.toBeTruthy()
        expect( is.sameType( true , true ) ).toBeTruthy()
        expect( is.sameType( true , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( true , {} ) ).not.toBeTruthy()
        expect( is.sameType( true , [] ) ).not.toBeTruthy()
        expect( is.sameType( true , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( true , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( true , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( true , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( new Boolean() , null ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , '' ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , new String() ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , true ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , new Boolean() ) ).toBeTruthy()
        expect( is.sameType( new Boolean() , {} ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , [] ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( new Boolean() , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( {} , null ) ).not.toBeTruthy()
        expect( is.sameType( {} , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( {} , 0 ) ).not.toBeTruthy()
        expect( is.sameType( {} , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( {} , '' ) ).not.toBeTruthy()
        expect( is.sameType( {} , new String() ) ).not.toBeTruthy()
        expect( is.sameType( {} , true ) ).not.toBeTruthy()
        expect( is.sameType( {} , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( {} , {} ) ).toBeTruthy()
        expect( is.sameType( {} , [] ) ).not.toBeTruthy()
        expect( is.sameType( {} , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( {} , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( {} , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( {} , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( [] , null ) ).not.toBeTruthy()
        expect( is.sameType( [] , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( [] , 0 ) ).not.toBeTruthy()
        expect( is.sameType( [] , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( [] , '' ) ).not.toBeTruthy()
        expect( is.sameType( [] , new String() ) ).not.toBeTruthy()
        expect( is.sameType( [] , true ) ).not.toBeTruthy()
        expect( is.sameType( [] , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( [] , {} ) ).not.toBeTruthy()
        expect( is.sameType( [] , [] ) ).toBeTruthy()
        expect( is.sameType( [] , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( [] , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( [] , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( [] , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( function () {} , null ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , 0 ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , '' ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , new String() ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , true ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , {} ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , [] ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , function () {} ) ).toBeTruthy()
        expect( is.sameType( function () {} , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( function () {} , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( new Date() , null ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , '' ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , new String() ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , true ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , {} ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , [] ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , new Date() ) ).toBeTruthy()
        expect( is.sameType( new Date() , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( new Date() , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( new Error() , null ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , 0 ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , '' ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , new String() ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , true ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , {} ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , [] ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( new Error() , new Error() ) ).toBeTruthy()
        expect( is.sameType( new Error() , /^/ ) ).not.toBeTruthy()

        expect( is.sameType( /^/ , null ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , void 0 ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , 0 ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , new Number() ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , '' ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , new String() ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , true ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , new Boolean() ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , {} ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , [] ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , function () {} ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , new Date() ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , new Error() ) ).not.toBeTruthy()
        expect( is.sameType( /^/ , /^/ ) ).toBeTruthy()

    } )

    it( 'is.primitive' , function () {

        expect( is.primitive( null ) ).toBeTruthy()
        expect( is.primitive( void 0 ) ).toBeTruthy()
        expect( is.primitive( 0 ) ).toBeTruthy()
        expect( is.primitive( new Number( 0 ) ) ).not.toBeTruthy()
        expect( is.primitive( '' ) ).toBeTruthy()
        expect( is.primitive( new String( '' ) ) ).not.toBeTruthy()
        expect( is.primitive( true ) ).toBeTruthy()
        expect( is.primitive( false ) ).toBeTruthy()
        expect( is.primitive( new Boolean( true ) ) ).not.toBeTruthy()
        expect( is.primitive( new Boolean( false ) ) ).not.toBeTruthy()
        expect( is.primitive( {} ) ).not.toBeTruthy()
        expect( is.primitive( [] ) ).not.toBeTruthy()
        expect( is.primitive( function () {} ) ).not.toBeTruthy()

        if ( typeof Symbol === 'function' ) {
            expect( is.primitive( Symbol() ) ).toBeTruthy()
            expect( is.primitive( Symbol[ 'for' ]( 'is' ) ) ).toBeTruthy()
        }

    } )

    it( 'is.date' , function () {
        expect( is.date( new Date() ) ).toBeTruthy()
    } )

    it( 'is.error' , function () {
        expect( is.error( new Error() ) ).toBeTruthy()
        // expect( is.error( new EvalError() ) ).toBeTruthy()
        // expect( is.error( new RangeError() ) ).toBeTruthy()
        // expect( is.error( new ReferenceError() ) ).toBeTruthy()
        // expect( is.error( new SyntaxError() ) ).toBeTruthy()
        // expect( is.error( new TypeError() ) ).toBeTruthy()
        // expect( is.error( new URIError() ) ).toBeTruthy()
    } )

    it( 'is.function' , function () {
        expect( is[ 'function' ]( function () {} ) ).toBeTruthy()
        expect( is[ 'function' ]( new Function() ) ).toBeTruthy() // eslint-disable-line no-new-func
    } )

    it( 'is.map' , function () {
        if ( typeof Map === 'function' ) {
            expect( is.map( new Map() ) ).toBeTruthy()
        }
    } )

    it( 'is.regexp' , function () {
        expect( is.regexp( /^/ ) ).toBeTruthy()
        expect( is.regexp( new RegExp() ) ).toBeTruthy()
    } )

    it( 'is.set' , function () {
        if ( typeof Set === 'function' ) {
            expect( is.set( new Set() ) ).toBeTruthy()
        }
    } )

    it( 'is.symbol' , function () {
        if ( typeof Symbol === 'function' ) {
            expect( is.symbol( Symbol() ) ).toBeTruthy()
            expect( is.symbol( Symbol[ 'for' ]( 'is' ) ) ).toBeTruthy()
        }
    } )

} )
